{
  "list": [{
    "name": "antd-admin",
    "git_url": "git://github.com/zuiidea/antd-admin.git",
    "author": "zuiidea",
    "description": "A admin dashboard application demo built upon Ant Design and Dva.js",
    "tags": ["react", "antd"],
    "coverPicture": "https://ucarecdn.com/3ba3280c-a0c0-4a8b-a2e3-ba38148121b6/",
    "readme": "# Antd Admin\n\n[![React Native](https://img.shields.io/badge/react-^15.4.1-brightgreen.svg?style=flat-square)](https://github.com/facebook/react)\n[![Ant Design](https://img.shields.io/badge/ant--design-^2.7.3-yellowgreen.svg?style=flat-square)](https://github.com/ant-design/ant-design)\n[![dva](https://img.shields.io/badge/dva-^1.1.0-orange.svg?style=flat-square)](https://github.com/dvajs/dva)\n\n[![GitHub issues](https://img.shields.io/github/issues/zuiidea/antd-admin.svg?style=flat-square)](https://github.com/zuiidea/antd-admin)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/zuiidea/antd-admin/pulls)\n[![MIT](https://img.shields.io/dub/l/vibe-d.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com)\n\n演示地址 <http://zuiidea.github.io/antd-admin/>\n\n备用地址 <http://47.92.30.98:8000>\n\n\n## 特性\n\n-   基于[react](https://github.com/facebook/react)，[ant-design](https://github.com/ant-design/ant-design)，[dva](https://github.com/dvajs/dva)，[Mock](https://github.com/nuysoft/Mock) 企业级后台管理系统最佳实践\n-   基于[Mock](https://github.com/nuysoft/Mock)实现脱离后端独立开发\n-   基于Antd UI 设计语言，提供后台管理系统常见使用场景\n-   基于[dva](https://github.com/dvajs/dva)动态加载 Model 和路由，按需加载\n-   浅度响应式设计\n\n## 注意\n如果使用到roadhog，且出现接口404\n-  保证`package.json`里没有`roadhog`\n-  删除`node_modules`\n- `npm i`\n- `npm i roadhog@0.6.0-beta.3 -g`\n\n## 更新日志\n\n### 4.2\n`2017-04-28`\n\n-   修改user相关API使用`Restful`风格\n-   增加user页面多条件查询[#266](https://github.com/zuiidea/antd-admin/issues/226)\n-   修复菜单默认高亮[#201](https://github.com/zuiidea/antd-admin/issues/201)\n\n`2017-04-21`\n\n-   重写Menu，Bread组件及配置文件，[说明](https://github.com/zuiidea/antd-admin/wiki/%E8%8F%9C%E5%8D%95%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n\n### 4.1\n\n`2017-04-14`\n\n-   升级开发工具为[roadhog](https://github.com/sorrycc/roadhog)\n-   使用`roadhog`的mock功能\n-   增强`utils/request.js`跨域处理能力\n\n## 开发构建\n\n### 目录结构\n\n```bash\n├── /mock/           # 数据mock的接口文件\n├── /dist/           # 项目输出目录\n├── /src/            # 项目源码目录\n│ ├── /components/   # UI组件及UI相关方法\n│ │ ├── skin.less    # 全局样式\n│ │ └── vars.less    # 全局样式变量\n│ ├── /routes/       # 路由组件\n│ │ └── app.js       # 路由入口\n│ ├── /models/       # 数据模型\n│ ├── /services/     # 数据接口\n│ ├── /utils/        # 工具函数\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── menu.js      # 侧边菜单配置\n│ │ ├── mock.js      # 数据拦截配置\n│ │ ├── config.js    # 项目常规配置\n│ │ ├── request.js   # 异步请求函数\n│ │ └── theme.js     # 项目需要在js中使用到样式变量\n│ ├── route.js       # 路由配置\n│ ├── index.js       # 入口文件\n│ └── index.html     \n├── package.json     # 项目信息\n└── proxy.config.js  # 数据mock配置\n```\n\n文件夹命名说明:\n\n-   components：组件（方法）为单位以文件夹保存，文件夹名组件首字母大写（如`DataTable`），方法首字母小写（如`layer`）,文件夹内主文件与文件夹同名，多文件以`index.js`导出对象（如`./src/components/Layout`）\n-   routes：页面为单位以文件夹保存，文件夹名首字母小写（特殊除外，如`UIElement`）,文件夹内主文件以`index.js`导出，多文件时可建立`components`文件夹（如`./src/routes/dashboard`），如果有子路由，依次按照路由层次建立文件夹（如`./src/routes/UIElement`）\n\n### 快速开始\n\n克隆项目文件:\n\n    git clone https://github.com/zuiidea/antd-admin.git\n\n进入目录安装依赖:\n\n    npm i 或者 yarn install\n    npm i roadhog@0.6.0-beta.3 -g\n\n开发：\n\n```bash\nnpm run dev    # 使用mock拦截请求，数据存储在localStroge里\n\n打开 http://localhost:8000\n```\n\n构建：\n\n```bash\nnpm run build\n\n将会生成dist目录\n```\n\n代码检测：\n\n```bash\nnpm run lint\n```\n\n## 参考\n\n用户列表：<https://github.com/dvajs/dva/tree/master/examples/user-dashboard>\n\ndashboard设计稿：<https://dribbble.com/shots/3108122-Dashboard-Admin> （已征得作者同意）\n\n## 截屏\n\nweb\n\n![](assets/demo4.gif)\n\n移动\n\n![](assets/demo3.gif)\n",
    "deployedAt": "2017-04-30T07:56:11.280Z"
  }, {
    "name": "antd-admin-boilerplate",
    "git_url": "git://github.com/myqianlan/antd-admin-boilerplate.git",
    "author": "myqianlan",
    "description": "以 antd 为基础组件构建的一套中后台管理系统的基本架构模板",
    "tags": ["antd", "react"],
    "coverPicture": null,
    "readme": "# antd-admin-boilerplate\n以 antd 为基础组件构建的一套中后台管理系统的基本架构模板\n\n## 预览\n\nhttp://myqianlan.com/antd-admin-boilerplate/dist/#/login\n\n账户密码随便输入即可\n\n## 目的\n\n使用 antd 和 react 来构建中后台系统，从上家公司开始，已经用来构建过三四个系统了，这个算是沉淀下来的一些东西，放出来给大家参考参考吧。\n\n## 技术栈\n\n- react\n- antd\n- webpack\n- es6(babel)\n\n## 兼容性\n\n原则上支持 IE9+ 及现代浏览器\n\n## 环境\n\n- node 4 LTS 版本\n- npm 建议 3+\n- webpack 1+\n\n> npm 建议使用cnpm, 通过设置 alias 的方式;(在私有npm还没搭建起来的时候)\n\n## 开发\n\n```bash\n\n    cpm install -g webpack webpack-dev-server\n\n    cnpm install\n\n    npm run dev\n\n```\n### 设置 api 代理\n\n可在 webpack.dev.config.js 里面的 devServer 配置项设置 api 代理\n\n## 其他\n\n其他功能问题请阅读本项目源代码，或者提 issue\n\n## 鸣谢\n\n其中很多代码参考了前同事范峻植的最初版本，在此表示感谢。\n\n## License\n\nMIT\n",
    "deployedAt": "2017-05-10T09:56:45.651Z"
  }, {
    "name": "antd-redux",
    "git_url": "git://github.com/guox191/antd-redux.git",
    "author": "guox191",
    "description": "A complex spa boilerplate built with redux and ant-design",
    "tags": ["redux", "antd", "restful", "leancloud"],
    "coverPicture": null,
    "readme": "# antd-redux\n\nA react boilerplate built with redux and ant-design.\n\nUsing restful API powered by leancloud.\n\n### 初衷\n\n  中小型管理后台在工作室内部日常项目中已然标配, 并且大多数由后端负责，使用的模板良莠不齐，没有规范，甚至引入各种前端bug，不能保证开发效率。\n\n  Ant Design是蚂蚁金服为中后台开发的前端解决方案，同样是为了解决集团内的这类问题。\n  \n  管理后台的前端需求较为集中，大多为表单，图表，展示列表等业务组件，提高开发效率的关键是高效方便地配置与调动这些组件，减少与业务逻辑代码的耦合，让后端开发专注于后台逻辑的实现。\n\n### 原则\n\n- 贴合业务，适应灵活的业务需求\n- 方便配置，尽可能发挥 JSX 的优越性\n- 封装React路由，抽象成数据结构代码\n- 友好的状态展示，如各类请求的 message，process 等\n- 每个 JSX 文件包含一个主组件\n\n### 架构\n\n|结构|选型|\n|---|---|\n|View层|React|\n|路由|React-Router|\n|UI组件|Ant.design|\n|HTTP|[isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch)|\n|数据层|Redux|\n|Middleware|[redux-logger](https://github.com/fcomb/redux-logger) [redux-thunk](https://github.com/gaearon/redux-thunk)|\n\n### Dev\n\n1. `npm install`\n2. `npm run dev` 使用 dora 作为本地开发的 web 服务器监听 8001\n3. 登录账号: guest guest\n\n### Usage\n\nbuild完成后在项目入口文件中引入两个文件. 默认 webpack 配置将第三方库单独打包到 `vendor.bundle.js` 中, 部分非系统核心库采用 amd 方式在使用的时候异步引入.\n```\n  <script src=\"./vendor.bundle.js\"></script>\n  <script src=\"./index.js\"></script>\n```\n\n### 目录结构\n\n- actions\n- components\n- config\n  - app.js\n  - ...\n- constants\n  - actions.js\n  - ...\n- reducers\n  - auth.reducer.js\n  - message.reducer.js\n- routes\n- lib\n- index.jsx\n- router.jsx\n- store.js\n\n### 核心State\n\n  - message: 全局消息通知, 即 ant-design 的 message 组件\n\n    ```\n     {\n        \"message\": {},\n        \"notification\": {}\n     }\n    ```\n\n  - login\n  - loading\n\n### 语法特性\n\n项目中尝试性地通过 babel 引入 ES6/ES7 新特性和实用的语法糖, 旨在编写可读性好,简洁优雅的代码.\n\nES6:\n - Class\n - Arrow function\n - Module\n - let / const\n - Destructuring assignment\n - Spread operator\n\nES7:\n - Property initializer\n - Decorator\n\n\n### 参考文献\n\n  [Best practice on handling data flow for login / signup pages with redirect](https://github.com/reactjs/redux/issues/297)\n  [flux-standard-action](https://github.com/acdlite/flux-standard-action)\n",
    "deployedAt": "2017-05-12T12:49:50.300Z"
  }, {
    "name": "blogVue",
    "git_url": "git://github.com/xumjs8623/blogVue.git",
    "author": "xumjs8623",
    "description": null,
    "tags": ["vue", "blog"],
    "coverPicture": null,
    "readme": "# blog-vue\n\n> A Vue.js project\n\n## Build Setup\n\n``` bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n\n# build for production and view the bundle analyzer report\nnpm run build --report\n\n# run unit tests\nnpm run unit\n\n# run e2e tests\nnpm run e2e\n\n# run all tests\nnpm test\n```\n\nFor detailed explanation on how things work, checkout the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).\n",
    "deployedAt": "2017-05-23T05:32:41.439Z"
  }, {
    "name": "chat",
    "git_url": "git://github.com/RaoHai/chat.git",
    "author": "RaoHai",
    "description": "A Chat Scaffold based on antd and dva:",
    "version": "",
    "tags": [],
    "coverPicture": "https://ucarecdn.com/c1a43345-d5ed-4167-875c-4680471903f2/",
    "readme": "# chat\nA Chat Scaffold based on antd and dva:\n\nScreenshots:\n-----\n\n![](https://cloud.githubusercontent.com/assets/566097/21448864/2dc1a59c-c922-11e6-9b80-726593d8163d.png)\n\n![](https://cloud.githubusercontent.com/assets/566097/21494490/f28c2eb0-cc4c-11e6-83b8-723ae1423328.png)\n\nFirebase Structure\n-----\n\n```\nroot: {\n  conversations: { // conversations\n    '-2h6WJbFPBxUs15iB15DnSAIRTyP2-1482823102860': {\n      participants: {\n        '2h6WJbFPBxUs15iB15DnSAIRTyP2': user,\n        '1482823102860': user\n      },\n      chats: {\n        '-KZzCufnRDtS4h0q9fL': {\n          content: '',\n          time: '',\n          user: {}\n        }\n      }\n    },\n    ...\n  },\n  user: { // online users\n    '2h6WJbFPBxUs15iB15DnSAIRTyP2': user,\n    ...\n  }\n}\n```\n\n\nInstall\n------\n\n```\ngit clone https://github.com/RaoHai/chat.git\ncd chat\nnpm install\nnpm start // enjoy :D\n\n```\n"
  }, {
    "name": "dva-antd-mobile-starter",
    "git_url": "git://github.com/xlsdg/dva-antd-mobile-starter.git",
    "author": "xlsdg",
    "description": "Get started with Dva.js and Ant Design mobile.",
    "tags": ["antd", "dva", "mobile"],
    "coverPicture": null,
    "readme": "# dva-antd-mobile-starter [![Build Status](https://travis-ci.org/xlsdg/dva-antd-mobile-starter.svg?branch=master)](https://travis-ci.org/xlsdg/dva-antd-mobile-starter)\n\n> Get started with Dva.js and Ant Design mobile.\n\n![Screen Shot](screenshot.png)\n",
    "deployedAt": "2017-05-24T12:14:31.221Z"
  }, {
    "name": "dva-antd-starter",
    "git_url": "git://github.com/xlsdg/dva-antd-starter.git",
    "author": "xlsdg",
    "description": "Get started with Dva.js and Ant Design.",
    "tags": ["dva", "antd"],
    "coverPicture": "https://ucarecdn.com/8602e133-b80f-4616-bbc8-f8cba40b6254/",
    "readme": "# dva-antd-starter [![Build Status](https://travis-ci.org/xlsdg/dva-antd-starter.svg?branch=master)](https://travis-ci.org/xlsdg/dva-antd-starter)\n\n> Get started with Dva.js and Ant Design.\n\n![Screen Shot](screenshot.png)\n",
    "deployedAt": "2017-05-24T12:15:35.432Z"
  }, {
    "name": "dva-example-user-dashboard",
    "git_url": "git://github.com/dvajs/dva-example-user-dashboard.git",
    "author": "dvajs",
    "description": "👲 👬 👨‍👩‍👧 👨‍👩‍👦‍👦",
    "tags": ["dva", "react", "antd"],
    "coverPicture": "https://ucarecdn.com/f9569dff-f570-494d-a16a-11dfe8bbefd1/",
    "readme": "# dva-example-user-dashboard\n\n详见[《12 步 30 分钟，完成用户管理的 CURD 应用 (react+dva+antd)》](https://github.com/sorrycc/blog/issues/18)。\n\n---\n\n<p align=\"center\">\n  <img src=\"https://zos.alipayobjects.com/rmsportal/bmkNCEoluwGaeGjYjInf.png\" />\n</p>\n\n## Getting Started\nInstall dependencies.\n\n```bash\n$ npm install\n```\n\nStart server.\n\n```bash\n$ npm start\n```\n\nIf success, app will be open in your default browser automatically.\n",
    "deployedAt": "2017-04-29T09:28:41.593Z"
  }, {
    "name": "dva-hackernews",
    "git_url": "git://github.com/dvajs/dva-hackernews.git",
    "author": "dvajs",
    "description": "HackerNews clone built with Dva.",
    "version": "",
    "tags": ["dva", "react", "hacknews"],
    "coverPicture": "https://ucarecdn.com/399ead84-8022-42c1-b8fd-c32526b39cdc/",
    "readme": "# dva-hackernews\n\nHackerNews clone built with [Dva](https://github.com/dvajs/dva), based on [vue-hackernews-2.0](https://github.com/vuejs/vue-hackernews-2.0).\n\n<p align=\"center\">\n  <a href=\"http://dvajs.github.io/dva-hackernews/\">\n    <img src=\"https://zos.alipayobjects.com/rmsportal/XUTutezexphTbgs.png\" width=\"700\" />\n    <br />\n    Live Demo\n  </a>\n</p>\n\n## TODO\n\n- [x] Item Page\n- [x] Comment Page\n- [x] User Page\n- [x] Real-time List Update with Animation\n- [x] Router Transform Animation\n- [ ] SSR\n- [ ] Dynamic Router\n- [ ] Handle loading status automatically\n- [ ] Render Performance\n\n## Run Locally\n\nInstall dependencies.\n\n```bash\n$ npm install\n```\n\nStart server.\n\n```bash\n$ npm start\n```\n\nOpen app in browser.\n\n```bash\n$ open http://localhost:8989/\n```\n"
  }, {
    "name": "r2",
    "git_url": "git://github.com/dog-days/r2.git",
    "author": "dog-days",
    "description": "基于React、Redux、react-router、react-router-redux、react-redux、immutable.js、Ant-Design等SPA开发手脚框架",
    "tags": ["redux", "antd", "immutable.js"],
    "coverPicture": null,
    "readme": "# R2框架\n\n[R2框架](https://github.com/dog-days/r2)(Redux React Framework)主要是基于React、Redux而构建的，其中还是用了`react-router`、`react-router-redux`、`react-redux`、`immutable.js`。同时使用webpack模块加载工具，采用ES62015语法。所有如果要使用本框架，这些知识多多少少都要会点的。同时也使用了[Ant Design React](http://ant.design/#/docs/react/introduce)组件,生成的页面使用的UI是Ant Design,目前只支持这种，后面页面生成也会支持多种UI组件。 R2框架旨在快速搭建页面，减少重复工作，减少重复代码，提高开发效率。\n\n特别说明：下面的环境是在mac下搭建的，在windows上会有差异。\n\n## R2框架相关阅读\n\n- [webpack配置](http://blog.leanote.com/post/sams/webpack%E7%9F%A5%E8%AF%86%E7%82%B9%E6%BB%B4) \n\n## 框架目录\n\n```shell\nR2/\n    - public/                      \t\t#项目最终生成处，直接拷贝到服务环境下即可访问\n        index.html                 \t\t#生成环境的index.html    \n        index_dev.html             \t\t#开发环境的index_dev.html    \n        + js/                      \t\t#生成的js和样式文件都在里面\n    - src/                         \t\t#框架和应用代码目录\n        index.jsx                  \t\t#框架应用入口文件\n        routes.js                  \t\t#路由配置处,可以自定义（不建议,后面会说到）\n        reducers.js                \t\t#Redux reducers总入口\n        store.js                   \t\t#Redux store配置处\n        - libs/                    \t\t#类库自定义的类库,框架使用者的类库可以放这里\n            + r2/                  \t\t#R2框架类库存放处，使用框架这不用理会\n        + common                   \t\t#当前项目公共component和设置等\n        - page/                    \t\t#页面级代码\n            App.js                 \t\t#路由第一层\"/\"component\n            action.js        \t   \t    #可自定义的公共actionCreator\n            reducer.js             \t\t#可自定义的公共reducer\n            + nopage               \t\t#404页面\n            + .viewModel           \t\t#页面模板（后面详说）\n            - view                 \t\t#各个页面存放位置\n                + layout           \t\t#layout文件存放处\n            \t\t- main/\n            \t\t\t_route.js \t   \t\t#路由设置处\n            \t\t\t.child_routes.js \t#自动生成，后面详解\n                - index/           \t\t#应用页面demo,参考使用\n                \t_route.js \t   \t    #路由设置处\n                    index.js       \t\t#index页面入口文件\n                    action.js      \t\t#Redux action，demo action任务定义处，当然也可以没有\n                    reducer.js     \t\t#Redux reducer，demo reducer定义处，当然也可以没有\n    + .end/                        \t\t#智能功能开发处，框架使用者不用理会\n    - style/                       \t\t#样式图片存放处,这个看喜好吧,约定方式\n        + css/                     \t\t#css样式\n        + img/                     \t\t#图片存放处\n    Gruntfile.js                   \t\t#grunt配置文件，根据需要自己拓展配置h打包生成环境\n    server.js                      \t\t#启动服务配置文件,开发环境\n    webpack.config.js              \t\t#webpack配置，根据需要自己拓展配置，开发环境 \n    package.js                     \t\t#npm配置文件\n    .babelrc                       \t\t#babel设置\n    .gitignore                     \t\t#git提交忽略设置\n```\n\n## 安装使用\n\n由于还没有正式的版本，可以clone或者下载本框架文件,然后运行下面命令。\n通过nvm安装node（nvm可以管理多个版本node,可以来回切换,请使用v6.0.0以上）\n\n```sh\n//安装nvm\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n//安装最新版node,并可以立刻使用node不用重启终端,安装时好像被墙了，通过vpn装成功\nnvm install node && nvm alias default node\n```\n\nnpm安装如果被墙可以使用[淘宝镜像](http://npm.taobao.org/)，单不建议使用cnpm，使用cnpm有时候会安装不完全，直接在~/.npmrc中直接配置：\n\n```sh\nregistry=https://registry.npm.taobao.org\n```\n\n```sh\n#如果没有安装grunt，请先安装要grunt。\nnpm install -g grunt-cli #安装全局命令\nnpm install #等待安装各种需要的package\ncd .end && npm install && cd ../ #安装本框架node后端支持，部分功能需要用到\nnpm run ac\nnpm start\n```\n\n然后直接在浏览中打开`http://localhost:8888/`,即可访问。\n\n### R2框架命令\n\nR2框架中自定义了如下命令\n\n```\n//运行服务，windows平台请使用,npm run startw\nnpm start \n```\n\n```\n//打包生成生产环境文件，windows平台请使用,npm run buildw\nnpm build \n```\n\n```\n//智能Route和Reducer生成命令,情况后续说明\nnpm run ac \n```\n\n```\n//开启R2框架后端服务支持，使用页面新建功能时最好开启需要开启，要不然看不了数据，详细后续说明\nnpm run startend \n```\n\n```\n//运行所有前端webpack和本框架的后端服务,windows使用npm run startwboth\nnpm run startboth \n```\n\n`npm run startboth` 相当于 `npm start && npm run startboth`\n\n```\nnpm run cv //页面生成,后续详说\n```\n\n## 智能构建\n\n经过上面的步骤可以运行看到页面了，现在开始看如何搭建一个新的页面，在搭建页面前先介绍R2框架自带的一些功能。\n\n### 智能构建route和reducer\n\n何为智能route和reducer,在R2框架中，只要遵循view文件位置约定规则，route和reducer就可以通过命令生成！你没听错，是用R2框架是不用怎么关注路由和reducer绑定的！\n运行一下命令即可\n\n```\nnpm run ac  // ac全称auto creator\n```\n\n不过要注意的是，view文件要按照约定位置放好，`R2/src/page/view`目录下新建文件夹就属于一个新页面(必须包含文件_route.js，layout是特殊的view，有点不一样),而reducer生成条件是在view目录下新建reducer.js就会被视为新建reducer，本框架强烈建议在当前页面文件夹中新建reducer.js。\n\n`npm run ac` 不带参数读取`R2/src/page/view`目录中文件，`npm run ac -- -m` 读取的时模板目录 `R2/src/page/.viewModel`，所有要查看模板，请运行`npm run ac -- -m`，之后在浏览器上访问指定模板即可。\n\n其中`reducer.js`需要遵守一定格式！ `reducer.js`格式如下:\n\n```jsx\nexport function origin(state = {}, action) {\n    switch (action.type) {\n        case RECIEVEORIGIN:     \n        default:\n            return state;\n    }\n}\n```\n\n不要使用下面这样的格式,虽然是没错，单目前R2框架还不支持智能识别这种格式。\n\n```jsx\nmodule.exports = {\n    origin(state,action){}\n}\n```\n\n### 页面生成器\n\n需要使用到以下命令\n\n```\nnpm run cv -- options \n```\n\noptions如下\n\n| 缩写   | 全称                    | 描述                        |\n| ---- | --------------------- | ------------------------- |\n| -h   | --help                | 帮助命令                      |\n| -V   | --version             | 版本命令                      |\n| -e   | --emptyPage           | 创建emptyPage视图模板           |\n| -n   | --noactionreducer     | 创建noactionreducer视图模板     |\n| -t   | --tableNoPagination   | 创建tableNoPagination视图模板   |\n| -p   | --tableWithPagination | 创建tableWithPagination视图模板 |\n| -l   | --layout              | 指定创建视图的layout，配合上面的命令使用   |\n\n例如：\n\n```shell\nnpm run cv -- -p test -l main //不使用-l时，默认为main\n```\n\n## 基本使用\n\n### layout模式\n\nlayout是特殊的一种view，其实就是react-router中的第二层组件（第一个是\"/\"，本框架是`src/page/App.jsx`），view是其子组件。以一种layout为例：\n\nlayout包括以下必要文件\n\n- `_route.js`，用作路由生成，可自行修改，单务必按照以下格式。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}`;\n\t}catch(e){}\n\treturn re;\n}\nvar childRoutes = function(){\n    //这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re;\n\ttry{\n\t\tre = require('./.child_routes.js');\n\t}catch(e){}\t\n\treturn re;\n}\nvar indexRoute = function(){\n    //这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re;\n\ttry{\n\t\tre = require(\"src/page/view/index/_route.js\");//indexRoute指定位置\n\t}catch(e){}\t\n\treturn re;\n}\nmodule.exports = {\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"main\")\n    },\n   \tindexRoute: indexRoute(),\n    childRoutes: childRoutes(),\n}\n```\n其中`r2Common.prefixUrl`是公共path部分（详细看下面公共path部分），可自行定义默认为空。如果定义后为`/r2`访问`/`会跳转到`/r2`路由。有点需要注意的是：**indexRoute**需要自己手动指定位置。\n\n- `index.jsx`，传进react-router处理\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\nimport { connect } from 'react-redux'\n\nclass View extends Component {\n\tconstructor(props){\n\t\tsuper(props);//使用了构造器,必须要super(props)继承 \n\t}\n    render() {\n\t\tsuper.render();//需要继承，本框架做了些处理，不继承，热替换失效。\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ this.props.children || \"\" }\n\t\t\t</div>\n\t\t)\t\n    }\n}\nvar ReduxView = connect((state)=>{\n\treturn {\n\t};\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n\thomeLink: {\n\t\tlabel:<Antd.Icon type=\"home\"/>,\n\t\tlink:'/',\n\t},\n});\nmodule.exports = ReduxView; \n```\n\n- .child_routes.js\n\n  `.child_routes.js`是个隐藏文件，自动生成。\n\n### view模式\n\nview是我们代码开发主要地方，以下是必要文件，`action.js`和`reducer.js`看需要。\n\n- `_route.js`,可当做二级路由（没layout）或三级路由（有layout），可自行修改，单务必按照以下格式。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}/about`;\n\t}catch(e){}\n\treturn re;\n} \n//以下配置请参照React-Router官方文档\nmodule.exports = {\n\tlayout: \"main\",//在这里设置layout\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"about\")//webpack生成文件命名\n    },\n}\n```\n\n- `index.jsx`代码结构\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\n\nclass View extends Component {\n    constructor(props){\n        super(props);//使用了构造器,必须要super(props)继承 \n    }\n    render() {\n        super.render();//需要继承，本框架做了些处理，不继承，热替换失效。\n        return (\n            <div></div>\n        )\n    }\n}\n\nvar ReduxView = connect((state)=>{\n    return {\n    };\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n    breadcrumb:[\n        {\n            label:'home',\n            link: '/',\n        },\n        {\n            label:'导播活动列表',\n        },\n    ],\n});\nmodule.exports = ReduxView; \n```\n\n### 设置公共path\n\n假设我们的域名是localhost，平常我们都是直接访问http://localhost就看访问了页面主页。但是也有特殊要求，要在http://localhost/main访问主页，访问http://localhost也跳转到http://localhost/main(当然通过ngnix可以做些特殊处理)。这个功能就是给你设置main的。\n\n通过`r2Common.prefixUrl`（位置在`src/common/common.js`）设置，默认为空，如果不为空第一个字符必须是`/`，如\n\n```jsx\nr2Common.prefixUrl = '/main';//如果只设置为'main',访问时会报404。\n```\n\n### 设置浏览器标签title\n\nR2框架是通过react default props设置title的， 在页面index.jsx中设置如下\n\n```jsx\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n});\n```\n\n### layout切换\n\nlayout默认是`page/view/layout/main`，设置位置为每个view中的`_route.js`，代码如下。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}/about`;\n\t}catch(e){}\n\treturn re;\n} \nmodule.exports = {\n\tlayout: \"main\",//在这里设置layout\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"about\")\n    },\n}\n```\n\n当设置为false时或者不设置，就没有layout。\n\n### 面包屑\n\n面包屑功能稍微特殊点，需要结合layout页面使用，目前的面包写是针对Ant Design UI做处理的。\n面包屑默认自带首页，如果需要修改可以在layout组件中的default props修改。\n\n修改layout组件默认的首页：\n\n```jsx\n//此处为layout组件\nvar ReduxView = connect((state)=>{\n\treturn {\n\t};\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n\thomeLink: {\n\t\tlabel:<Antd.Icon type=\"home\"/>,\n\t\tlink:'/',\n\t},\n});\nmodule.exports = ReduxView; \n```\n\n在当前页面组件的index.jsx中设置如下：\n\n```jsx\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n    breadcrumb:[\n        {\n            //还支持函数\n            label:function(params){\n                //params是R2从路由参数`:id`中解析处理，以`-`为分隔符。\n                //如果当前路由为`/test/page/9_demo`,params = [9,'demo']\n                return params[1];\n            },\n            link: function(parms){\n                //同label\n                return \"test/page/\"+params[0]; \n            },\n        },\n        {\n            label:'循环存储查询',\n            link: \"/test\",\n        },\n        {\n            label:'循环存储查询',\n        },\n    ]\n});\n```\n\n**展示**需要手动在当前的layout组件中添加，位置自定义：\n\n```jsx\n<div className=\"r2-breadcrumb\">\n\t{ this.breadcrumb || \"\" }\n</div>\n```\n\n### 自定义route\n\nR2框架目标是让使用者可以不用理会路由层，不过也提供了自定义路由和覆盖已生成的路由。进入`R2/src/routes.js`,代码如下：\n\n```jsx\nimport routes from '.fr/.temp/routes'\n/**\n *   var routes = {\n *      path : \"/\",\n *      indexRoute: \"\",\n *      component: \"\",\n *      childRoutes: { }\n *  }\n */\n//如果想自定义这里也是可以的,\n//Object.assign(routes.childRoutes,{\n\n//})\nmodule.exports = routes;\n```\n\n如果不了解，请先了解[react-router](https://github.com/reactjs/react-router)\n\n### 定义公共actionCreator\n\nR2框架公共actionCreator定义于`R2/src/page/action`,建议公共的actionCreator就定义在这里（当然你想定义在其他地方也可以）。commonAction代码如下\n\n```jsx\nimport * as r2ActionCreator from \"r2/actionCreator\"\n\nlet requestPosts = r2ActionCreator.requestPosts; \nlet receivePosts = r2ActionCreator.receivePosts; \nexport const REQUESTLOGOUT = \"REQUESTLOGOUT\"\nexport const RECIEVELOGOUT = \"RECIEVELOGOUT\"\n\nexport function logout(successCallback,callbackAllStatus) {\n    var url = r2Common.REQUESTURL + \"/sop/v1/operators/logout\";\n    return r2fetch({\n        method: 'POST',\n        params:{},\n        callbackAllStatus,\n        successMessage: true,\n    }).dispatchFetchOne(url,requestPosts(REQUESTLOGOUT,\"logout\"),receivePosts(RECIEVELOGOUT,\"logout\"),successCallback)\n}\n```\n\n### 定义公共reducer\n\nR2框架公共reducer定义于`R2/src/page/reducer`,建议公共的reducer就定义在这里（当然你想定义在其他地方也可以）,然后运行`npm run ac`进行reducer绑定。代码如下\n\n```jsx\nimport * as actionCreator from './action' \n\nexport function logout(state = {}, action) {\n    switch (action.type) {\n        \n        case actionCreator.REQUESTLOGOUT: \n        case actionCreator.RECIEVELOGOUT:   \n            return Object.assign({}, state,action);\n        \n        default:\n            return state;\n    }\n}\n```\n\n### 全局变量定义\n\n目前R2框架的全局变量如下，详细情况API。\n\n- r2fn,公共常用方法\n- r2ActionCreator,公共actionCreator\n- r2fetch,R2封装的fetch方法\n- r2Common,当前项目公共配置或方法\n\n## 国际化功能\n\n国际化语言包位置在`R2/src/common/locale`文件中，`index.js`文件是默认是当地开发中语言。配置语言位置在`R2/src/common/common.js`中，如下：\n\n```js\n//国际化处理，language未定义就是默认使用./locale/index.js\nexport const language = require(\"./locale/en_US\")\n```\n\n使用方式如下：\n\n```jsx\n...\nreturn (\n\t<div>{r2fn.t(\"主页\")}</div>\n)\n...\n```\n\n`locale/index.js`\n\n```jsx\nmodule.exports = [\n\t\"R2框架\",\n\t\"主页\",\n\t\"关于\",\n\t\"这是一个主页页面！\",\n\t\"这是一个关于页面！\",\n]\n```\n\n`locale/en_US.js`，索引位置要跟上面的一一对应，所以最好以index.js模板进行翻译，**注意空格**哦\n\n```js\nmodule.exports = [\n\t\"R2 framework\",\n\t\"Home\",\n\t\"About\",\n\t\"This is a home page!\",\n\t\"This is a  about page!\",\n]\n```\n\n## 约定位置\n\n## 其他的一些特殊模式\n\n为了更好的管理代码，R2框架建议，所有React组件继承`r2/module/BasicComponent`(layout组件式特殊的一种)。之后新的组件包括页面index.jsx组件，数据逻辑处理请全部写在方法dataAdapter中，事件处理写在events中,redux 的dispatch actionCreator写在方法actions中。代码示例如下：\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\nimport { connect } from 'react-redux'\n\nclass View extends Component {\n    constructor(props){\n        super(props); \n    }\n    \n    actions(){\n        return {\n            getData(){\n                this.props.dispatch(actionCreator());\n            },\n        }\n    }\n        \n    dataAdapter(){\n        return {\n            sortData(){\n                this.props.data.sort((a,b)=>{\n                    return b-a;\n                })\n            },\n        } \n    }\n    \n    events(){\n        return {\n            handleClick(text){\n                return (e)=>{\n                    console.debug(text)\n                    console.debug(e)\n                }\n            }\n        }\n    }\n    \n    render() {\n        super.render();\n        this.sortData();\n        return (\n            <div onClick={this.handleClick(\"骚年！\")}>\n                Hello Word!\n            </div>\n        )   \n    }\n}\nmodule.exports = View; \n```\n\n定义在dataAdapter和events中的方法可以被组件`this`直接访问，R2框架内部做了处理。事件绑定也建议使用thunk模式。\n\n## 可能会遇到的坑\n\n### 使用淘宝镜像问题\n\n使用cnpm install有些包会出问题（mac上），把报错包卸掉，使用npm安装就没问题。\n以下是cnpm安装后报错报\n\n- extract-text-webpack-plugin \n\n## FAQ\n\n正在整理。 \n\n\n\n",
    "deployedAt": "2017-05-16T03:50:16.927Z"
  }, {
    "name": "react-admin",
    "git_url": "git://github.com/yezihaohao/react-admin.git",
    "author": "yezihaohao",
    "description": "react-admin system solution",
    "tags": ["admin", "react", "antd"],
    "coverPicture": "https://ucarecdn.com/2d4171cf-5e20-43f3-8231-d6c7874d08b2/",
    "readme": "# react-admin\nreact-admin system solution\n### 前言\n> 网上react后台管理开源免费的完整版项目比较少，所以利用空余时间集成了一个版本出来，已放到GitHub\n  启动和打包的时间都稍长，请耐心等待两分钟\n\n- [GitHub地址](https://github.com/yezihaohao/react-admin)\n- [预览地址](http://cheng_haohao.oschina.io/reactadmin/#/app/dashboard/index)(还没做响应式，不建议手机预览😕)\n\n### 依赖模块\n<span style=\"color: rgb(184,49,47);\">项目是用create-react-app创建的，主要还是列出新加的功能依赖包</span>\n\n<span style=\"color: rgb(184,49,47);\">点击名称可跳转相关网站😄😄</span>\n\n- [react@15.5.0](https://facebook.github.io/react/)\n- [react-router@3.0.2](https://react-guide.github.io/react-router-cn/)(<span style=\"color: rgb(243,121,52);\">react路由,4.x的差异还是比较大，暂时还是3.x的版本</span>)\n- [antd@2.9.3](https://ant.design/index-cn)(<span style=\"color: rgb(243,121,52);\">蚂蚁金服开源的react ui组件框架</span>)\n- [axios@0.16.1](https://github.com/mzabriskie/axios)(<span style=\"color: rgb(243,121,52);\">http请求模块，可用于前端任何场景，很强大👍</span>)\n- [echarts-for-react@1.2.0](https://github.com/hustcc/echarts-for-react)(<span style=\"color: rgb(243,121,52);\">可视化图表，别人基于react对echarts的封装，足够用了</span>)\n- [recharts@0.22.3](http://recharts.org/#/zh-CN/)(<span style=\"color: rgb(243,121,52);\">另一个基于react封装的图表，个人觉得是没有echarts好用</span>)\n- [nprogress@0.2.0](https://github.com/rstacruz/nprogress)(<span style=\"color: rgb(243,121,52);\">顶部加载条，蛮好用👍</span>)\n- [react-draft-wysiwyg@1.9.6](https://github.com/jpuri/react-draft-wysiwyg)(<span style=\"color: rgb(243,121,52);\">别人基于react的富文本封装，如果找到其他更好的可以替换</span>)\n- [react-draggable@2.2.4](https://github.com/mzabriskie/react-draggable)(<span style=\"color: rgb(243,121,52);\">拖拽模块，找了个简单版的</span>)\n- [screenfull@3.2.0](https://github.com/sindresorhus/screenfull.js/)(<span style=\"color: rgb(243,121,52);\">全屏插件</span>)\n- [photoswipe@4.1.2](https://github.com/dimsemenov/photoswipe)(<span style=\"color: rgb(243,121,52);\">图片弹层查看插件，不依赖jQuery，还是蛮好用👍</span>)\n- [animate.css@3.5.1](http://daneden.me/animate)(<span style=\"color: rgb(243,121,52);\">css动画库</span>)\n- 其他小细节省略\n\n### 功能模块\n<span style=\"color: rgb(184,49,47);\">备注：项目只引入了ant-design的部分组件，其他的组件antd官网有源码，可以直接复制到项目中使用，后续有时间补上全部组件。</span>\n<span style=\"color: rgb(184,49,47);\">项目使用了antd的自定义主题功能-->黑色，若想替换其他颜色，具体操作请查看antd官网</span>\n<!--more-->\n\n- 首页\n    - 完整布局\n    - 换肤(全局功能，暂时只实现了顶部导航的换肤，后续加上其他模块)\n- 导航菜单\n    - 顶部导航(菜单伸缩，全屏功能)\n    - 左边菜单(增加滚动条以及适配路由的active操作)\n- UI模块\n    - 按钮(antd组件)\n    - 图标(antd组件并增加彩色表情符)\n    - 加载中(antd组件并增加顶部加载条)\n    - 通知提醒框(antd组件)\n    - 标签页(antd组件)\n    - 轮播图(ant动效组件)\n    - 富文本\n    - 拖拽\n    - 画廊\n- 动画\n    - 基础动画(animate.css所有动画)\n    - 动画案例\n- 表格\n    - 基础表格(antd组件)\n    - 高级表格(antd组件)\n    - 异步表格(数据来自掘金酱的接口)\n- 表单\n    - 基础表单(antd组件)\n- 图表\n    - echarts图表\n    - recharts图表\n- 页面\n    - 登录页面(包括GitHub第三方登录)\n    - 404页面\n\n### 功能截图\n#### 首页\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd1.gif)\n#### 按钮图标等\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd2.gif)\n#### 轮播图\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd3.gif)\n#### 富文本\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd4.gif)\n#### 拖拽\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd5.gif)\n#### 画廊\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd6.gif)\n#### 动画\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd7.gif)\n#### 表格\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd8.gif)\n#### 表单\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd9.gif)\n#### 图表\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd10.gif)\n#### 页面\n![截图](https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd11.gif)\n\n### 代码目录\n```js\n+-- build/                                  ---打包的文件目录\n+-- config/                                 ---npm run eject 后的配置文件目录\n+-- node_modules/                           ---npm下载文件目录\n+-- public/                                 \n|   --- index.html\t\t\t\t\t\t\t---首页入口html文件\n|   --- npm.json\t\t\t\t\t\t\t---echarts测试数据\n|   --- weibo.json\t\t\t\t\t\t\t---echarts测试数据\n+-- src/                                    ---核心代码目录\n|   +-- axios                               ---http请求存放目录\n|   |    --- index.js\n|   +-- components                          ---各式各样的组件存放目录\n|   |    +-- animation                      ---动画组件\n|   |    |    --- ...   \n|   |    +-- charts                         ---图表组件\n|   |    |    --- ...   \n|   |    +-- dashboard                      ---首页组件\n|   |    |    --- ...   \n|   |    +-- forms                          ---表单组件\n|   |    |    --- ...   \n|   |    +-- pages                          ---页面组件\n|   |    |    --- ...   \n|   |    +-- tables                         ---表格组件\n|   |    |    --- ...   \n|   |    +-- ui                             ---ui组件\n|   |    |    --- ...   \n|   |    --- BreadcrumbCustom.jsx           ---面包屑组件\n|   |    --- HeaderCustom.jsx               ---顶部导航组件\n|   |    --- Page.jsx                       ---页面容器\n|   |    --- SiderCustom.jsx                ---左边菜单组件\n|   +-- style                               ---项目的样式存放目录，主要采用less编写\n|   +-- utils                               ---工具文件存放目录\n|   --- App.js                              ---组件入口文件\n|   --- index.js                            ---项目的整体js入口文件，包括路由配置等\n--- .env                                    ---启动项目自定义端口配置文件\n--- .eslintrc                               ---自定义eslint配置文件，包括增加的react jsx语法限制\n--- package.json                                    \n```\n### 安装运行\n##### 1.下载或克隆项目源码\n##### 2.npm安装相关包文件(国内建议增加淘宝镜像源，不然很慢，你懂的😁)\n```js\nnpm i\n```\n##### 3.启动项目\n```js\nnpm start\n```\n##### 4.打包项目\n```js\nnpm run build\n```\n\n### 结尾\n该项目会不定时更新，后续时间会添加更多的模块\n\n若有问题，可加QQ群264591039与我交流\n\n如果对你有帮助，给个star哟~~❤️❤️❤️❤️\n\n",
    "deployedAt": "2017-05-19T10:31:23.510Z"
  }, {
    "name": "react-antd",
    "git_url": "git://github.com/sosout/react-antd.git",
    "author": "sosout",
    "description": "基于react + redux + immutable + less + ES6/7 + webpack + fetch + react-router + antd(1.x)实现的SPA后台管理系统模板",
    "tags": ["react", "antd", "redux"],
    "coverPicture": null,
    "readme": "# react-antd(新版后台很快就与大家见面了)\n[![React Native](https://img.shields.io/badge/react-^15.3.2-brightgreen.svg?style=flat-square)](https://github.com/facebook/react)\n[![Redux](https://img.shields.io/badge/redux-^4.4.5-yellowgreen.svg?style=flat-square)](https://github.com/reactjs/redux)\n[![Redux Immutablejs](https://img.shields.io/badge/immutablejs-^0.0.8-orange.svg?style=flat-square)](https://github.com/indexiatech/redux-immutablejs)\n[![Ant Design](https://img.shields.io/badge/ant--design-^2.7.2-yellowgreen.svg?style=flat-square)](https://github.com/ant-design/ant-design)\n\n[![MIT](https://img.shields.io/dub/l/vibe-d.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n## 前言\n>  本工程主要基于react + redux + immutable + less + ES6/7 + webpack + fetch + react-router + antd(1.x)实现的SPA后台管理系统模板。\n\n>  如果觉得不错的话，请star一下吧 😊\n\n>  编码时间：8:00——9:30, 下班时间——24:00，其他时间要工作。代码未优化，处女座代码必须要优化。由于代码延后，先向大家说声抱歉。您有什么问题可以私信我segmentfault。\n\n[线上demo](http://antd.sosout.com/)\n\n## 关于我自己\n>  使用技术： react + redux + immutable + less + ES6/7 + webpack + fetch + react-router + antd(1.x)\n\n>  项目说明： 此项目是本人空余时间搭建的。希望大家提供宝贵的意见和建议，谢谢。\n\n>  邮&emsp;&emsp;箱： sosout@yeah.net\n\n>  个人网站： http://www.sosout.com/\n\n>  个人博客： http://blog.sosout.com/\n\n>  个人简书： http://www.jianshu.com/users/23b9a23b8849/latest_articles\n\n>  segmentfault：https://segmentfault.com/u/sosout\n\n### 下载\n\n```\n# git clone\n\ngit clone https://github.com/sosout/react-antd.git\n\ncd react-antd\n```\n\n### 安装\n```bush\n// 安装前请先确保已安装node和npm\n// 需要提前在全局安装webpack和webpack-dev-server,如果已安装请忽略\nnpm install webpack -g\nnpm install webpack-dev-server -g\n\n// 安装成功后,再安装依赖\nnpm install\n```\n### 运行\n```bush\nnpm run dev （正常编译模式，注意：index.html里必须手动引用app.css，<link href=\"/antd/dist/app.css\" rel=\"stylesheet\" />，否则没有样式）\n\nnpm run hot （热替换编译模式，注意：热替换模式下index.html里去掉引用app.css）\n  \nnpm run dist （发布生产版本，对代码进行混淆压缩，提取公共代码，分离css文件）\n```\n\n### 访问\n在浏览器地址栏输入[http://127.0.0.1:8888](http://127.0.0.1:8888)\n\n### 目标功能\n- [x] 登录页面\n- [x] 全站布局\n- [x] 全站路由\n- [ ] 对接接口，优化代码(冗余代码，不规则写法，界面样式)\n- [ ] 后台系统常用场景会逐个完善\n\n####历史更新\n  *2017.02.20*\n\n  \t1. 初始化项目目录;\n\n  \t2. webpack配置完成; \n\n  \t3. 登录退出;\n\n  \t4. 整体布局;\n\n  \t5. 菜单映射路由;\n",
    "deployedAt": "2017-05-10T10:23:09.622Z"
  }, {
    "name": "react-antd-admin",
    "git_url": "git://github.com/fireyy/react-antd-admin.git",
    "author": "fireyy",
    "description": "React Ant.design Admin UI",
    "tags": ["react", "antd"],
    "coverPicture": "https://ucarecdn.com/7c2b3bca-5824-4601-b5c1-8add07d03ae4/",
    "readme": "## React Ant.Design Admin UI\n\n<p align=\"center\">\n  <a href=\"https://react-antd-admin.now.sh\" target=\"_blank\">\n    <img src=\"demo.png\" width=\"700px\">\n    <br>\n    Live Demo\n  </a>\n</p>\n\n## Features\n\n- [React](https://facebook.github.io/react/)\n- [Redux](https://github.com/reactjs/redux)\n- [Ant.Design](http://ant.design/)\n- [Babel](https://babeljs.io/)\n- [webpack](https://webpack.github.io/)\n- [mocha](https://mochajs.org/)\n- [enzyme](https://github.com/airbnb/enzyme)\n\n## Getting Started\n\nJust clone the repo and install the necessary node modules:\n\n```shell\n$ git clone https://github.com/fireyy/react-antd-admin\n$ cd react-antd-admin\n$ npm install\n```\n\n## Run Dev\n\n```shell\n$ npm run dev\n```\n\n## Run test spec\n\n```shell\n$ npm run test\n```\n\n## Build\n\n```shell\n$ npm run build\n```\n\n## Changelog\n\n### 0.1.2\n\n* 更新依赖组件到最新版本\n* 增加 page2 demo\n",
    "deployedAt": "2017-05-10T09:39:08.923Z"
  }, {
    "name": "react-antd-admin-jiangxy",
    "git_url": "git://github.com/jiangxy/react-antd-admin.git",
    "author": "jiangxy",
    "description": "用React和Ant Design搭建的一个通用管理后台",
    "tags": ["react", "antd"],
    "coverPicture": "https://ucarecdn.com/2432a297-b1f9-46b7-ade7-cfcaef91955d/",
    "readme": "# React通用后台\n\n目标是快速搭建一个可用的后台界面，可以先看下[DEMO(普通)](http://jiangxy.github.io/react-antd-admin) / [DEMO(TAB模式)](http://jiangxy.github.io/react-antd-admin/tabMode)，用户名/密码：guest/guest。友情提示：这个DEMO还是有点大的，加载可能稍慢，注意网速。。。\n\n也可以[点击这里](docs/Screenshot.md)查看截图，包含一些主要特性的演示。\n\n如果对React或Ant Design感兴趣，但又不知如何入手的话，也可以参考下这个项目。\n \n* [这是个啥东西](#需求背景)\n* [Quick Start](#quick-start)\n* [更新记录](CHANGELOG.md)\n* [TODO](docs/TODO.md)\n* [一些说明](#一些说明)\n* [更多文档](docs/README.md)\n\n## 需求背景\n\n其实总结下就一句话：简化后端人员的前端开发。。。\n\n虽然俺是个java开发，但总是难免要做一些前端的东西。比如各种内部系统，各种运营后台，总要有个界面给人用的吧。如果是自己用的话当然命令行就可以将就下了。。。\n\n内部系统么，公司也不会很重视，不会有专业的前端来搞。后端人员自己搞搞，能用就行了。\n\n然而每次写前端都很痛苦，无论以前用velocity+jquery+bootstrap，还是现在用React。首先有很多重复的工作，很多后台界面其实都长得差不多；其次有时会为一些很小的需求投入很大精力，写很多业务逻辑，但这些代码都是不可复用的，感觉花这么多时间不值得，毕竟不是本职工作啊，只是个二手前端。。。甚至有时折腾css就能搞一天。。。\n\n于是就想着能否一劳永逸，搞个比较通用的东西出来，**尽量用写配置的方式替代写代码**。从某种角度上说，和[Metronic](http://keenthemes.com/preview/metronic/)/[AdminLTE](https://almsaeedstudio.com/preview)的目标有点相似。正好前段时间在研究[Ant Design](http://ant.design)，做了一些尝试，于是有了这个项目。当然并不完美，对于React和Ant Design，我也是边学边用的。\n\n首先看下，常见的后台系统都是什么样子的？\n\n![](docs/overview.png)\n\n是不是大部分后端系统的界面都差不多这个样子？分为几个主要的部分：\n\n* 侧边栏：上面是一个logo，下面是可展开的各级菜单。点击菜单项时，右边会展示相应的内容。\n* Header：展示当前登录的用户名和面包屑导航，还可能有自定义的一些菜单之类\n* 内容区：展示具体的内容，跟业务有关的\n* Footer：展示copyright之类的\n* 还有些看不到的，比如登录、注销等\n\n于是我做的**第一件事**，就是搭建一个框架，用配置文件的方式，生成这样一个界面。你可以定义自己的侧边栏（参考[src/menu.js](src/menu.js)），定义点击侧边栏菜单时在右边渲染什么组件（参考[src/index.js](src/index.js)，其实就是React Router的配置），包括header/footer/登录校验/单点登录等，都可以配置（参考[src/config.js](src/config.js)）。\n\n在此基础上，我只要根据不同的后台系统的业务逻辑，去写不同的React组件，再配置下菜单就可以了。貌似简化很多了。缺点就是所有后台都长一个样子。。。\n\n但能否更简化些呢？在各种运营后台中，最常见的操作是什么？我的感觉，最常见的就是各种数据库表的CRUD。我们经常赋予数据库字段各种业务意义。比如将某条记录的status字段改为-1，表示屏蔽这个商品；或者新增一个商品，其实就是某个表新增一条记录之类的。运营的很多操作，是不是都能简化成CRUD？于是我又做了**第二件事**：写了一个通用的CRUD组件，我称之为DBTable。大概长这个样子：\n\n![](docs/DBTable.png)\n\n也是分为几个部分：\n\n* 查询条件区：其实就是个表单，所有表单项都是由配置文件生成的（参考[src/schema/test.querySchema.js](src/schema/test.querySchema.js)），支持各种数据类型\n* 各种操作：提供常用的CRUD/导入/导出等操作\n* 查询结果展示：就是一个表格，这个表格的schema也是可配置的（参考[src/schema/test.dataSchema.js](src/schema/test.dataSchema.js)）\n* 针对单条数据的操作：也是可配置的（参考[src/schema/testAction.dataSchema.js](src/schema/testAction.dataSchema.js#L52)）\n\n另外提醒下，1.4.0版本之后，querySchema和dataSchema不一定要用js文件配置了，可以从服务端异步加载了，参考[异步schema相关配置](docs/AsyncSchema.md)。\n\n使用者只用关心自己的schema文件就可以了，不用在意渲染出来是什么样子。利用DBTable组件，就可以快速实现对某个表的CRUD了（其实不只可以用于数据库，符合这种操作模式的都可以用）。缺点就是没有了明确的业务含义，运营MM们可能不会用。。。她们又不知道CRUD是啥。所以需要培训下，但也是套近乎的好机会啊😄。\n\n但是且慢，只有界面是不够的，**如何跟后端对接**？于是我又定义了[后端接口格式](docs/Ajax.md)。只要按这个格式去写后端接口，就可以跟这套通用后台无缝对接。如果你跟我一样是个懒人，而且恰巧是用java的，又恰巧后端是基于Spring的，那也可以使用我提供的一个[小工具](https://github.com/jiangxy/react-java-goos)直接生成后端接口，然后填写自己的业务逻辑就可以了。\n\n使用这套工具，如果一切顺利的话，你能很快的搭出一个后台界面，包含基础的登录/菜单/导航/CRUD/导入/导出等功能，并且界面&体验也还算看得过去，不用任何编码，只是修改配置。\n\n我尽量做到**配置优于代码**，尽量少写代码。但完全不写代码是不可能的，尤其是有个性化需求时，这就要自己权衡了。这套工具比较适合项目初期做个原型、或者对后台要求不高的情况。\n\n## Quick Start\n\n在自己的机器上调试：\n\n1. 保证node版本5.3+，npm版本3.3+\n2. clone下来后，`npm install`，安装必要的依赖\n3. `npm run dev`，启动webpack-dev-server，打开浏览器`http://localhost:8080`查看效果。默认是debug模式，不会请求后端接口，所有数据都是mock的，相关配置见[src/config.js](src/config.js)\n4. 如果有必要的话可以把logLevel设置为debug（见[src/config.js](src/config.js)），会输出详细的debug日志，打开chrome的console就可以看到。\n\n用在自己的项目中：\n\n1. 保证node版本5.3+，npm版本3.3+\n2. clone下来后，`npm install`，安装必要的依赖\n3. 参考[src/menu.js](src/menu.js)，按自己的需要配置侧边栏和顶部菜单\n4. 修改[src/index.js](src/index.js)中的路由表，保证和menu.js中的菜单项一致，否则可能404\n5. 如果要用DBTable组件的话，参考[src/schema](src/schema)下的例子，编写自己的querySchema和dataSchema文件。在路由表中配置DBTable组件时，要把表名作为props传入，类似`<Route path=\"option1\" tableName=\"test\" component={DBTable}/>`。\n6. 修改[src/config.js](src/config.js)中相关配置，比如项目名、footer、单点登录等等。\n7. `npm run prod`，编译js文件，然后将dist目录下的所有js/css/html文件拷贝到自己的工程中，前端的工作就完成了。一般会有一个index.html，一个bundle.min.css，以及多个js文件，跟是否使用动态路由有关。\n8. 开发后端接口，接口规范见[这里](docs/Ajax.md)。如果是java后端，可以使用[这个工具](https://github.com/jiangxy/react-java-goos)帮你生成。\n9. 启动你的web服务，访问`index.html`查看效果。\n\n其他一些命令:\n\n1. `npm run eslint`/`npm run stylelint`/`npm run lesshint`，一些lint工具。\n2. `npm run clean`，删除dist目录下的bundle*.js。\n\n## 一些说明\n\n### 安全/权限问题\n\n目前对安全&权限都没考虑进去，如果有这方面的要求，只能后端校验了。在请求后端接口时校验用户的身份和权限。\n\n权限问题也很麻烦，感觉不太好做成通用的东西，如果有需求的话，还是定制开发比较好。\n \n### 兼容性\n\n能力所限，只能保证chrome中正常使用。。。话说在各种内部系统中，要求只能用chrome也挺常见吧。\n\n如果我解决了兼容性问题，就不是二手前端了。。。\n\n另外由于我是在mac下进行开发的，所以对windows下的情况测试的比较少，有问题欢迎提issue，我尽力解决。\n\n### bundle size\n\n单页应用的首屏渲染一直都是个大问题。webpack打包出来的bundle.js一般都很大，虽然我想了很多办法去优化，但总是还会有1M多，实在减不下去了。。。所以应用到外网时要小心，初次加载时可能比较慢。\n\n内网的话就无所谓了，一般网速都不是问题。\n",
    "deployedAt": "2017-05-10T10:09:39.074Z"
  }, {
    "name": "react-antd-demo",
    "git_url": "git://github.com/luozhihao/react-antd-demo.git",
    "author": "luozhihao",
    "description": "基于react及antd的demo",
    "tags": ["antd", "react"],
    "coverPicture": null,
    "readme": "## react-antd-demo\n基于react及antd的demo\n\n## 演示地址\ndemo: [http://luozhihao.github.io/react-antd-demo/index.html](http://luozhihao.github.io/react-antd-demo/index.html)\n\n## 文档说明\n地址：[http://www.cnblogs.com/luozhihao/p/5579786.html](http://www.cnblogs.com/luozhihao/p/5579786.html)\n\n## 本地运行\n> npm install\n\n> npm run dev\n",
    "deployedAt": "2017-05-10T10:22:39.679Z"
  }, {
    "name": "react-frontend-boilerplate",
    "git_url": "git://github.com/huhulab/react-frontend-boilerplate.git",
    "author": "huhulab",
    "description": "React admin frontend project boilerplate (Based on ant.design)",
    "tags": ["react", "antd"],
    "coverPicture": null,
    "readme": "## What's this\nReact([ant-design](https://github.com/ant-design/ant-design)) based frontend boilerplate project.\n\n## How to run it\n``` bash\nnpm install\n# More commands see: package.json\nnpm start\n# Open http://localhost:3000/#/demo/test_forms\n```\n",
    "deployedAt": "2017-05-24T12:16:08.998Z"
  }, {
    "name": "react-redux-antd",
    "git_url": "git://github.com/Justin-lu/react-redux-antd.git",
    "author": "Justin-lu",
    "description": "react redux for CMS/Enterprise class App/ERP/Admin with ant-design",
    "tags": ["redux", "antd", "cms", "react"],
    "coverPicture": null,
    "readme": "## Feature List\n- hot reloading/browser-sync/redux devtools on dev build\n![](http://ww1.sinaimg.cn/large/785cd1e3gw1f69xb4vta2g20tb0fs7c5.gif)\n- minify/chunkhash/trackJS on production build\n![](http://ww4.sinaimg.cn/large/785cd1e3gw1f69xey2om7g20tb0fs1kx.gif)\n- eslint both of terminal and pre-commit\n![](http://ww1.sinaimg.cn/large/785cd1e3gw1f69xiq41uog20tb0fsn8e.gif)\n![](http://ww2.sinaimg.cn/large/785cd1e3gw1f69zn0p20gj21je0jan1f.jpg)\n- unit test of react/redux\n![](http://ww3.sinaimg.cn/large/785cd1e3gw1f69x6lccmij21020m2juk.jpg)\n![](http://ww2.sinaimg.cn/large/785cd1e3gw1f69zp1v97ij21kw0u8td8.jpg)\n- es6/webapck\n- sass support\n- UI Kit: Ant Design\n- isomorphic-fetch\n- mock data\n- example app\n- ...\n\n## Getting Started\n### install\n\n```\nnpm install --global yarn # install yarn\ngit clone git@github.com:Justin-lu/react-redux-antd.git demo\ncd demo\nyarn\n\n# run dev\nnpm run start\n# run mock server\nnpm run start:mock\n```\n\n### npm script\n\n```shell\n# dev start with test/lint\nnpm run start \n\n# prodction start with browser-sync server\nnpm run start:prod\n\n# production build\nnpm run build\n\n# mock data\nnpm run start:mock\n\n# run test\nnpm run test\n\n# generate test cover report\nnpm run test:cover\n\n```\n\n### eslint\n\n- enable pre-commit hook\n\n```shell\ncd .git/hooks/ && ln -s ./../../tools/pre-commit pre-commit\n```\n\n## Structure\n\n```shell\n├── README.md\n├── coverage # test coverage report\n├── dist  # production build directory\n│   ├── 269268ade790db48e9dcc5eb0db587cd.jpg\n│   ├── antd.f7f5aa5b8e507559a22db55944433a23.css\n│   ├── app.89f9817729a2b19dc35586b6f0505c83.css\n│   ├── app.fa0e73813f3ce3a7605d.js\n│   ├── favicon.ico\n│   └── index.html\n├── package.json\n├── src  # source directory\n│   ├── actions  # write your redux action here\n│   │   ├── users.js  # redux action\n│   │   └── users.spec.js  # redux action test\n│   ├── components  # write your redux components here\n│   │   ├── CustomTable.js\n│   │   └── NotFoundPage  # this is a folder which include NotFoundPage.js, NotFoundPage.scss, NotFoundPage.spec.js\n│   ├── config\n│   │   └── api.js  # write your api config here\n│   ├── constants  # some constants\n│   │   └── actionTypes.js\n│   ├── containers  # write your redux containers here\n│   │   ├── AccessControl.js\n│   │   ├── App  # App.js App.scss\n│   ├── data\n│   │   └── db.json  # mock data file\n│   ├── favicon.ico\n│   ├── index.html  # template index.html\n│   ├── index.js  # entry file\n│   ├── reducers  # write your redux reducers here.\n│   │   ├── index.js  # entry file\n│   │   ├── initialState.js  # put all of the initial state in here\n│   │   ├── users.js  # users reducers\n│   │   └── users.spec.js  # users reducers spec\n│   ├── routes.js  # routes\n│   ├── store  # store\n│   │   ├── configureStore.dev.js\n│   │   ├── configureStore.js\n│   │   └── configureStore.prod.js\n│   └── utils  # utils file\n│       └── cFetch.js\n├── tools  # some tools script\n│   ├── build.js\n│   ├── chalkConfig.js\n│   ├── distServer.js\n│   ├── mock.js\n│   ├── pre-commit\n│   ├── srcServer.js\n│   ├── startMessage.js\n│   ├── testSetup.js\n│   └── updateIndexHTML.js\n├── webpack.config.dev.js  # webpack config of dev\n└── webpack.config.prod.js  # webpack config of production\n```\n",
    "deployedAt": "2017-05-10T09:38:01.324Z"
  }, {
    "name": "react-redux-antd-okoala",
    "git_url": "git://github.com/okoala/react-redux-antd.git",
    "author": "okoala",
    "description": "React & Redux  & Ant.Design",
    "tags": ["react", "redux", "antd"],
    "coverPicture": null,
    "readme": "## React Redux 脚手架\n",
    "deployedAt": "2017-05-16T04:00:00.678Z"
  }, {
    "name": "react-redux-antd-starter",
    "git_url": "git://github.com/BetaRabbit/react-redux-antd-starter.git",
    "author": "BetaRabbit",
    "description": "A React + Redux + Ant-Design frontend boilerplate",
    "tags": ["antd", "redux", "react"],
    "coverPicture": null,
    "readme": "# react-redux-antd-starter\nA React + Redux + Ant-Design frontend boilerplate.\n\n- [x] React\n- [x] Redux\n- [x] Ant-Design\n- [x] React Router\n- [x] React Router Redux\n- [x] Redux Actions\n- [x] Babel\n- [x] PostCSS\n- [x] LESS\n- [ ] CSS Modules\n- [x] ESLint (Airbnb)\n- [x] JWT\n- [ ] Examples\n\n## npm scripts\n\n### Dev\n```\nnpm run dev\n```\nOpen `http://localhost:3000` in your browser.\n\n### Lint\n\n#### Lint only\n```\nnpm run lint\n```\n\n#### Auto fix\n```\nnpm run lint:fix\n```\n\n#### Build\n```\nnpm run build\n```\nFind built files in ./dist.\n\n#### Start (production)\n```\nnpm run start\n```\nOpen `http://localhost:3000` in your browser.\n",
    "deployedAt": "2017-05-24T12:13:35.771Z"
  }, {
    "name": "react-redux-universal",
    "git_url": "git://github.com/subenksaha/react-redux-universal.git",
    "author": "subenksaha",
    "description": "React Redux Isomorphic Webpack 2 Boilerplate based on ant.design",
    "tags": ["Universal", "Redux"],
    "coverPicture": null,
    "readme": "# React Redux Isomorphic Webpack 2 Boilerplate based on [ant.design](https://ant.design)\n----------\n----------\n\n### About\n----------\nThis boilerplate has following feature:\n\n * Universal React rendering\n * Webpack 2 for client side transformation and bundling\n * Babel js for server side transformation\n * import using absolute path in client and server for make code reuse easier\n * development hot reloading\n * Sequelize Js for backend api(for RDBMS)\n * using ui framework ant.design\n * latest webpack 2 (2.5+)\n * latest React Router 4\n * express-handlebars for server side templating\n * custom console logger for better log visibility & trace\n * nested route on react router 4 supported in server and client\n\n### Technologies\n----------\nImportant technologies used\n* [Node Js](https://nodejs.org/en/)\n* [Express Js](https://expressjs.com/)\n* [React Js](https://github.com/reactjs) version 15.1\n* [React Router](https://github.com/ReactTraining/react-router) version 4+\n* [React Redux](https://github.com/reactjs/react-redux) version 5+\n* [Ant Design](https://ant.design) version 2.5+\n* [Babel Js](https://babeljs.io/) core version 6.24\n* [Webpack](https://webpack.js.org/) version 2.5+\n\n### Installation\n----------\n* Clone the repo\n* cd project folder\n* npm install (in cmd/ terminal)\n\n### Commands\n----------\n* To run development server \n\t>npm start\n* To clean previous asset and build new and then run production server\n \t>npm run build\n* To run production using previuosly built asset\n \t>npm run serve\n* To clean previously built assets\n \t>npm run clean\n\nNow create your awesome project :)\n",
    "deployedAt": "2017-05-22T02:57:48.122Z"
  }, {
    "name": "react-scaffold",
    "git_url": "git://github.com/starriv/react-scaffold.git",
    "author": "starriv",
    "description": "A react basic scaffold ",
    "tags": ["react"],
    "coverPicture": null,
    "readme": "# React Scaffold\n\nThat is a simple React scaffolding, it contains a React,Redux,React-Router.\nHope can help you fast develop\n\n[![Build Status](https://travis-ci.org/starriv/react-scaffold.svg?branch=master)](https://travis-ci.org/starriv/react-scaffold)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n# Feature\n- ES6+ support, use babel\n- with development and the product model\n- development patterns support heat load\n\n# Setup\n- git clone https://git.coding.net/starriv/react-scaffold.git\n- npm install\n\n# Run\ndefault use development model\n- dev:  npm run dev && open your brower to http://127.0.0.1:3002\n- prod: npm run build\n\n\n# React 脚手架\n这是一个基础React脚手架，它包含有React,React Router, Redux。\n希望它能帮你住快速开发。\n\n# 特点\n- ES6+的支持,使用Babel转换\n- 开发模式 和 产品模式\n- 开发模式热加载支持\n\n# 安装\n- git clone https://git.coding.net/starriv/react-scaffold.git\n- npm install\n\n# 运行\n默认为开发模式\n- dev npm run dev && 打开浏览器 http://127.0.0.1:3002\n- prod npm run build\n",
    "deployedAt": "2017-05-16T04:40:11.100Z"
  }, {
    "name": "react-start-kit",
    "git_url": "git://github.com/jovey-zheng/react-start-kit.git",
    "author": "jovey-zheng",
    "description": "A boilerplate of SPA, built with React.js, Webpack, ES6+, Redux, Router, Babel, Express, Ant Design...",
    "tags": ["redux", "antd"],
    "coverPicture": null,
    "readme": "\n## Getting start\n\n  1. Clone this repo:\n  ```\n  $ git clone https://github.com/jovey-zheng/react-start-kit.git\n  ```\n\n  2. Install dependenices:\n  ```\n  $ npm i\n  ```\n\n  3. Start the project:\n  ```\n  $ npm start               // default prot is 3000\n  $ PORT=80 npm start       // using `PORT` to customize port in the CLI\n  ```\n\n  4. Access browser: [http://localhost:3000](http://localhost:3000). Or start with [`minihost`](https://www.npmjs.com/package/minihost):\n    ```\n    h -n start npm start\n    ```\n    and then access: [http://start.t.t](http://start.t.t)\n\n  5. Then do whatever you want : ).\n\n## Contributing\n\nPull requests are welcome!\n\n## LICENSE\n\nLicense under [MIT](https://github.com/jovey-zheng/react-start-kit/blob/master/LICENSE.md).\n",
    "deployedAt": "2017-05-16T03:54:22.524Z"
  }, {
    "name": "reactSPA",
    "git_url": "git://github.com/JasonBai007/reactSPA.git",
    "author": "JasonBai007",
    "description": "A Demo SPA developed with React, ES6, Webpack (1.x), and Antd (1.x) 【move to react-seed】",
    "tags": ["react", "spa"],
    "coverPicture": null,
    "readme": "### Target\n> 使用React技术栈开发SPA.\n\n### Tech Stack\n* UI库：React & React-Dom\n* UI组件：Antd\n* 路由：React-Router & History\n* 框架：Reflux\n* JS：ES6 \n* 样式：Less\n* 图标：Antd自带/FontAwesome\n* 动画：Animate.css\n* 与后台通信：Fetch/Ajax\n* 日期处理：Moment\n* 假数据模拟：MockJS\n* 打包构建：Babel Webpack\n* 包管理：Npm\n\n### Features\n* 自主配置开发环境\n* 支持ES6\n* React-Router配置路由\n* Less代替Css\n* Fetch代替Ajax\n* MockJs模拟数据\n* AnimateCSS提供动画效果\n* 支持jQuery\n* 支持浏览器自动刷新\n\n### Usage\n> 1、安装依赖：$ npm install  \n> 2、启动服务：$ npm start  \n> 3、生成文件：$ npm run build  \n\n### Articles\n* [React 的ES5、ES6写法对照表](http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8)\n* [React 组件之间如何交流](http://www.tuicool.com/articles/AzQzEbq)\n* [react-router 中的history](https://zhuanlan.zhihu.com/p/20799258?refer=jscss)\n* [react-router 按需加载](https://segmentfault.com/a/1190000007141049)\n* [ECMAScript 6入门](http://es6.ruanyifeng.com/)\n* [Webpack 实例和文章](https://github.com/JasonBai007/webpack-starter-kit)\n* [React Reflux](https://segmentfault.com/a/1190000002793786)\n* [React+reflux应用 IE8/9/10/11兼容实践](https://segmentfault.com/a/1190000005794242#articleHeader9)\n* [Reflux系列01：异步操作经验小结](https://segmentfault.com/a/1190000004250062)\n* [传统 Ajax 已死，Fetch 永生](http://www.jianshu.com/p/THLARe#)\n* [Fetch API](https://github.github.io/fetch/)\n* [使用Mock.js进行独立于后端的前端开发](https://segmentfault.com/a/1190000003087224)\n\n### Diary(填坑日志)\n> 1、如果引入FontAwesome,会严重增加编译后的CSS文件体积  \n> 2、通过定义Vendors，可以抽取出第三方库文件，避免所有js文件打包在一起  \n> 3、通过安装babel-plugin-import插件，可以自动抽离用到的ant组件  \n> 4、路由的history配置，如果配置成browserHistory,服务器端也需要做相应的配置  \n> 5、路由的history配置，如果配置成hashHistory,则url地址里会有难看的后缀  \n> 6、编译静态文件的webpack配置中，插件项目需要设置成生产环境NODE_ENV:JSON.stringify(\"production\")  \n> 7、实现路由的跳转，页面内的导航，请使用history（自行Github之），这绝壁是个大坑！  \n> 8、本项目使用的是antd 1.x版本，想升级到最新版本（2.x），结果需要改动的地方实在太多，于是放弃\n \nLicense\n----\n\nMIT\n",
    "deployedAt": "2017-05-16T03:58:04.030Z"
  }, {
    "name": "star-initReact-example",
    "git_url": "git://github.com/pookpal/star-initReact-example.git",
    "author": "pookpal",
    "description": "demo with react,ant-design,redux,react-router,webpack,babel",
    "tags": ["antd", "redux", "react"],
    "coverPicture": "https://ucarecdn.com/286f108f-63b8-4477-8c65-4ec919390c7f/",
    "readme": "# star-initReact-example\n\nA demo with star-initReact-example\n\n\n##效果截图\n>* 首页\n\n![首页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/1.png)\n\n>* 列表页\n\n![播放页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/2.png)\n\n>* 弹框\n\n![播放页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/3.png)\n\n>* 表格组件\n\n![播放页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/4.png)\n\n>* echart\n\n![播放页](https://raw.githubusercontent.com/pookpal/star-initReact-example/master/screenshots/5.png)\n\n\n## 使用技术和实现功能\n1. webpack + React +React-router + React-redux +ES6 + ant-design\n2. React热替换\n3. 国际化\n4. 整合Echart\n5. 自定义ant-design主题和局部样式\n\n\n\n## 测试账号\nadmin\n123456\n\n## 准备环境\n\n```bash\n\n$ git clone git@github.com:pookpal/star-initReact-example.git\n$ npm install -g webpack rimraf \n$ cd star-initReact-example\n$ npm install\n\n//mac环境下命令行\n$ npm run dev:mac   //MAC环境下面打包部署命令\n$ npm run build:mac  // MAC环境下打包部署命令\n\n\n//window环境下命令行\nD:\\www\\star-initReact-example> npm run dev:win   // window下面开发调试\nD:\\www\\star-initReact-example> npm run build:win  // window环境下打包部署命令\n\n\n\n\n\n\n\n```\n\n想要更好的开发体验，还需安装两个 Chrome 插件：[Redux DevTools](https://chrome.google.com/webstore/detail/lmhkpmbekcpmknklioeibfkpmmfibljd) 和 [LiveReload](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei) 。\n\n## 启动调试\n\n```bash\n### 此演示脚本为mac环境下运行\n$ npm run dev:mac\n```\n\n## 打包构建代码\n\n```bash\n### 此演示脚本为mac环境下运行\n// 生成国际化文件供配置\n$ npm run build:i18n-js:mac\n\n// 配置国际化文件后打包构建生成最终部署代码\n$ npm run build:mac\n\n```\n\n## 目录结构\n\n```\n.\n├── /dist/               # 构建输出的文件会在这里\n├── /scripts/            # 生成国际化配置文件脚本\n├── /node_modules/       # 第三方类库和工具\n├── /src/                # 应用源码\n├ ├── /assets/           # 静态资源文件\n│ ├── /components/       # React components\n│ ├── /entries/          # 应用入口\n│ ├── /locale/           # 国际化配置文件,会自动生成\n│ ├── /route/            # 路由信息\n│ ├── /store/            # redux \n│ ├── /styles/           # 全局样式 \n│ ├── /temp/             # 临时文件，会自动生成\n│ └── /views/            # 页面组件\n├── .babelrc             # 配置 babel\n├── webpack.config.js    # 扩展开发调试 webpack 配置\n├── webpack.production.config.js    # 扩展打包构建 webpack 配置\n└── package.json         # 配置入口文件、依赖和 scripts\n```\n\n\n## 内置类库\n\n- [react](https://github.com/facebook/react)\n- [redux](https://github.com/reactjs/redux)\n- [redux-actions](https://github.com/acdlite/redux-actions)\n- [react-router](https://github.com/reactjs/react-router)\n- [classnames](https://github.com/JedWatson/classnames)\n- [react-router](https://github.com/reactjs/react-router)\n- [react-router-redux](https://github.com/reactjs/react-router-redux)\n\n## 工具特性\n\n热替换和 LiveReload\n\n> 基于 [Webpack Vanilla HMR](https://webpack.github.io/docs/hot-module-replacement-with-webpack.html)，支持 `components`, `router`, `views` 目录的模块热替换，其余目录的修改则会自动刷新页面。\n\n> CSS 的自动刷新需通过 [LiveReload](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei) Chrome 插件配合使用。\n\n> - [Why Vanilla HMR](https://github.com/reactjs/redux/pull/1455)\n\n支持 css-modules\n\n> src/components和src/views中的 less 文件会被解析为 css-modules\n\n## License\nMIT\n\n",
    "deployedAt": "2017-05-16T03:56:36.098Z"
  }, {
    "name": "ts-dva",
    "git_url": "git://github.com/huang6349/ts-dva.git",
    "author": "huang6349",
    "description": "TypeScript + dva + Antd",
    "tags": ["typescript", "dva", "antd"],
    "coverPicture": "https://ucarecdn.com/a042cff3-e056-422d-abec-fef52d1e2a0b/",
    "readme": "ts-dva\n=======\n\n* Language:TypeScript\n\n* Framework:dva\n\n* UI:ant.design\n\nTable of Contents\n-------\n[目录]\n\n* [Install[安装依赖]](#install)\n* [Usage[用法]](#usage)\n* [Demo[项目演示]](#demo)\n* [Links[教程链接]](#links)\n* [Thank[致谢]](#thank)\n* [License[开源协议]](#license)\n\nInstall\n-------\n[安装依赖]\n\n```bash\nnode >= 4.2.0\n```\n```bash\n$ npm install -g typescript\n$ npm install\n```\n\n[可选操作]\n```bash\n$ npm install -g typings\n```\n\nUsage\n-------\n[用法]\n\n#### development[开发环境]\n\n```bash\n$ npm start\n```\n访问：[http://127.0.0.1:8989](http://127.0.0.1:8989)\n\n#### test[测试环境]\n\n```bash\n$ npm run test\n```\n\n#### production[生产环境]\n\n```bash\n$ npm run build\n```\n\nDemo\n-------\n[项目演示]\n\n登录1\n![登录1](https://github.com/huang6349/Pictures/blob/master/ts-dva/2016-10-27_111333.png)\n\n布局1\n\n![布局1](https://github.com/huang6349/Pictures/blob/master/ts-dva/2016-10-14_163215.png)\n\nLinks\n-------\n[教程链接]\n\n* [Microsoft/TypeScript](https://github.com/Microsoft/TypeScript)\n* [facebook/react](https://github.com/facebook/react)\n* [dvajs/dva](https://github.com/dvajs/dva)\n* [ant-design/ant-design](https://github.com/ant-design/ant-design)\n* [sorrycc/dva-boilerplate-typescript](https://github.com/sorrycc/dva-boilerplate-typescript)\n\nThank\n-------\n[致谢]\n* [sorrycc](https://github.com/sorrycc)\n\nLicense\n-------\n[开源协议]\n\n[MIT](https://tldrlegal.com/license/mit-license)",
    "deployedAt": "2017-05-16T03:48:26.866Z"
  }, {
    "name": "ui",
    "git_url": "git://github.com/tianzx/ui.git",
    "author": "tianzx",
    "description": "frontend project separate from backend",
    "tags": ["react", "antd"],
    "coverPicture": null,
    "readme": "## React Ant.Design Admin UI\n\n## Features\n\n- [React](https://facebook.github.io/react/)\n- [Redux](https://github.com/reactjs/redux)\n- [Ant.Design](http://ant.design/)\n- [Babel](https://babeljs.io/)\n- [webpack2](https://webpack.github.io/)\n- [mocha](https://mochajs.org/)\n- [enzyme](https://github.com/airbnb/enzyme)\n- [Travis](https://travis-ci.org/)\n- [Docker](https://www.docker.com/)\n\n## Getting Started\n\nJust clone the repo and install the necessary node modules:\n\n```shell\n$ git clone https://github.com/tianzx/ui.git\n$ cd ui\n$ npm install\n$ npm start\n```\n\n## Run test spec\n\n```shell\n$ npm run test\n```\n\n## Run production build\n\n```shell\n$ vi /etc/environment and export NODE_ENV='production'\n$ npm run build\n```\n\nin your local machine\n```shell\n$ scp -r localPath/ui/dist/  remotePath:ui\n```\n\nin your remote machine\n```shell\n$ mv dist/* ./\n$ cnpm install pm2 -g \n$ pm2 start server.js\n```\n\nnotation: before execute the command ,you must ensure you have executed the command\n\n```shell\n$ cnpm install rimraf -g\n```\n\n## NOTICE\n\n### replace npm with cnpm(in China)\n&emsp;&emsp;&emsp;&emsp;https://npm.taobao.org/\n### add n to admin nodejs version\n&emsp;&emsp;&emsp;&emsp;https://github.com/tj/n\n\n### update npm \n&emsp;&emsp;&emsp;&emsp;cnpm update -g npm\n",
    "deployedAt": "2017-05-24T13:36:54.544Z"
  }]
}